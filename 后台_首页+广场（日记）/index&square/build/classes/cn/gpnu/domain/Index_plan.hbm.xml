<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
   <!-- 配置表与实体对象的关系 -->
   <!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. -->
<hibernate-mapping package="cn.gpnu.domain" >
	<!-- 
		class元素: 配置实体与表的对应关系的
			name: 完整类名
			table:数据库表名
			lazy:懒加载
	 -->
	<class name="Index_plan" lazy="true" table="Index_plan" >
		<!-- id元素:配置主键映射的属性
				name: 填写主键对应属性名
				column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						每个类型有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
		<id name="plan_id"  >
			<!-- generator:主键生成策略，即每条记录录入时主键的生成规则（7）
				 identity:主键自增，由数据库来维护主键值,录入时不需要制定主键
				 increment（了解）:主键自增，有hibernate来维护，每次插入时查询表中id最大值，+1作为当前id
			 	 sequence：Oracle中主键生成策略
			 	 hilo（了解）:高低位算法，主键自增，由hibernate来维护，开发时不使用
			  	 native:hilo+sequence+identity  自动三选一策略
			  	 uuid:产生随机不重复字符串作为主键，主键类型必须为String
			  	 assigned:自然主键生成策略，hibernate不会管理主键，人工维护
			 -->
			<generator class="native"></generator>
		</id>
		<!-- property元素:除id之外的普通属性映射
				name: 填写属性名
				column(可选): 填写列名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						每个类型有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
		<property name="openid" column="openid" length="28"></property>
		<property name="plan_info" column="plan_info" ></property>
		<property name="plan_date" column="plan_date" ></property>
		<property name="plan_done" column="plan_done" ></property>
		<property name="plan_setTime" column="plan_setTime" ></property>
		<property name="plan_useTime" column="plan_useTime" ></property>
		
		
		<!-- 集合,一对多关系,在配置文件中配置 -->
		<!-- 
			name属性:集合属性名
			column属性: 外键列名
			class属性: 与我关联的对象完整类名
		 -->
		 <!-- 
		 	级联操作:	cascade
		 		save-update: 级联保存更新
		 		delete:级联删除
		 		all:save-update+delete
		 	级联操作: 简化操作.目的就是为了少些两行代码.
		  -->
		  <!-- inverse属性: 配置关系是否维护. 
		  		true: customer不维护关系
		  		false(默认值): customer维护关系
		  -->
		<set name="times" inverse="true" cascade="save-update"  >
			<key column="plan_times_id" ></key>
			<one-to-many class="Index_times" />
		</set>
		
	</class>
</hibernate-mapping>